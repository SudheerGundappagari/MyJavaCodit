apply plugin: 'java'
apply plugin: "com.github.sherter.google-java-format"


// https://github.com/sherter/google-java-format-gradle-plugin
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.8"
  }
}


// Assume Java 8
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  // JUnit framework
  testCompile 'junit:junit:4.+'
  compile 'junit:junit:4.+'
  //JUnit 5 / Jupiter
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
  testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
   
  // Test mocking framework
  testCompile "org.mockito:mockito-core:1.+"

  // Google Guava lib
  compile group: 'com.google.guava', name: 'guava', version: '22.0'

  // Google truth API
  compile "com.google.truth:truth:0.36"

  // Apache commons lang
  compile 'org.apache.commons:commons-lang3:3.6'
}

// Tests display stdout and stderr
test {
  dependsOn cleanTest
  testLogging.showStandardStreams = true
  //useJUnitPlatform()
}


String javaPackage = "com/williamfiset/datastructures";
String javatestsPackage = "javatests/com/williamfiset/datastructures";

sourceSets {
  main {
    java {
      srcDirs = [
        javaPackage + '/balancedtree',
        javaPackage + '/binarysearchtree',
        javaPackage + '/bloomfilter',
        javaPackage + '/dynamicarray',
        javaPackage + '/fenwicktree',
        javaPackage + '/hashtable',
        javaPackage + '/linkedlist',
        javaPackage + '/priorityqueue',
        javaPackage + '/quadtree',
        javaPackage + '/queue',
        javaPackage + '/segmenttree',
        javaPackage + '/hashset',
        javaPackage + '/skiplist',
        javaPackage + '/stack',
        javaPackage + '/suffixarray',
        javaPackage + '/trie', 
        javaPackage + '/unionfind',
        javaPackage + '/utils'
      ]
    }
  }
  test {
    java {
      srcDirs = [
        javatestsPackage + '/balancedtree',
        javatestsPackage + '/binarysearchtree',
        javatestsPackage + '/bloomfilter',
        javatestsPackage + '/dynamicarray',
        javatestsPackage + '/fenwicktree',
        javatestsPackage + '/hashtable',
        javatestsPackage + '/linkedlist',
        javatestsPackage + '/priorityqueue',
        javatestsPackage + '/quadtree',
        javatestsPackage + '/queue',
        javatestsPackage + '/segmenttree',
        javatestsPackage + '/hashset',
        javatestsPackage + '/skiplist',
        javatestsPackage + '/stack',
        javatestsPackage + '/suffixarray',
        javatestsPackage + '/trie', 
        javatestsPackage + '/unionfind',
        javatestsPackage + '/utils'
      ]
    }
  }
}


task buildDependenciesFolder(type: Copy) {
  from configurations.compile
  into './dependencies'
}






